// Code generated by MockGen. DO NOT EDIT.
// Source: fileop.go

package fileop

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	meta "jingoal.com/dfs/meta"
	transfer "jingoal.com/dfs/proto/transfer"
)

// MockDFSFile is a mock of DFSFile interface
type MockDFSFile struct {
	ctrl     *gomock.Controller
	recorder *MockDFSFileMockRecorder
}

// MockDFSFileMockRecorder is the mock recorder for MockDFSFile
type MockDFSFileMockRecorder struct {
	mock *MockDFSFile
}

// NewMockDFSFile creates a new mock instance
func NewMockDFSFile(ctrl *gomock.Controller) *MockDFSFile {
	mock := &MockDFSFile{ctrl: ctrl}
	mock.recorder = &MockDFSFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockDFSFile) EXPECT() *MockDFSFileMockRecorder {
	return _m.recorder
}

// Read mocks base method
func (_m *MockDFSFile) Read(p []byte) (int, error) {
	ret := _m.ctrl.Call(_m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (_mr *MockDFSFileMockRecorder) Read(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Read", reflect.TypeOf((*MockDFSFile)(nil).Read), arg0)
}

// Write mocks base method
func (_m *MockDFSFile) Write(p []byte) (int, error) {
	ret := _m.ctrl.Call(_m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write
func (_mr *MockDFSFileMockRecorder) Write(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Write", reflect.TypeOf((*MockDFSFile)(nil).Write), arg0)
}

// Close mocks base method
func (_m *MockDFSFile) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockDFSFileMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockDFSFile)(nil).Close))
}

// GetFileInfo mocks base method
func (_m *MockDFSFile) GetFileInfo() *transfer.FileInfo {
	ret := _m.ctrl.Call(_m, "GetFileInfo")
	ret0, _ := ret[0].(*transfer.FileInfo)
	return ret0
}

// GetFileInfo indicates an expected call of GetFileInfo
func (_mr *MockDFSFileMockRecorder) GetFileInfo() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetFileInfo", reflect.TypeOf((*MockDFSFile)(nil).GetFileInfo))
}

// updateFileMeta mocks base method
func (_m *MockDFSFile) updateFileMeta(_param0 map[string]interface{}) {
	_m.ctrl.Call(_m, "updateFileMeta", _param0)
}

// updateFileMeta indicates an expected call of updateFileMeta
func (_mr *MockDFSFileMockRecorder) updateFileMeta(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "updateFileMeta", reflect.TypeOf((*MockDFSFile)(nil).updateFileMeta), arg0)
}

// getFileMeta mocks base method
func (_m *MockDFSFile) getFileMeta() *DFSFileMeta {
	ret := _m.ctrl.Call(_m, "getFileMeta")
	ret0, _ := ret[0].(*DFSFileMeta)
	return ret0
}

// getFileMeta indicates an expected call of getFileMeta
func (_mr *MockDFSFileMockRecorder) getFileMeta() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "getFileMeta", reflect.TypeOf((*MockDFSFile)(nil).getFileMeta))
}

// MockDFSFileHandler is a mock of DFSFileHandler interface
type MockDFSFileHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDFSFileHandlerMockRecorder
}

// MockDFSFileHandlerMockRecorder is the mock recorder for MockDFSFileHandler
type MockDFSFileHandlerMockRecorder struct {
	mock *MockDFSFileHandler
}

// NewMockDFSFileHandler creates a new mock instance
func NewMockDFSFileHandler(ctrl *gomock.Controller) *MockDFSFileHandler {
	mock := &MockDFSFileHandler{ctrl: ctrl}
	mock.recorder = &MockDFSFileHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockDFSFileHandler) EXPECT() *MockDFSFileHandlerMockRecorder {
	return _m.recorder
}

// Create mocks base method
func (_m *MockDFSFileHandler) Create(info *transfer.FileInfo) (DFSFile, error) {
	ret := _m.ctrl.Call(_m, "Create", info)
	ret0, _ := ret[0].(DFSFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (_mr *MockDFSFileHandlerMockRecorder) Create(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Create", reflect.TypeOf((*MockDFSFileHandler)(nil).Create), arg0)
}

// Open mocks base method
func (_m *MockDFSFileHandler) Open(id string, domain int64) (DFSFile, error) {
	ret := _m.ctrl.Call(_m, "Open", id, domain)
	ret0, _ := ret[0].(DFSFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open
func (_mr *MockDFSFileHandlerMockRecorder) Open(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Open", reflect.TypeOf((*MockDFSFileHandler)(nil).Open), arg0, arg1)
}

// Duplicate mocks base method
func (_m *MockDFSFileHandler) Duplicate(oid string) (string, error) {
	ret := _m.ctrl.Call(_m, "Duplicate", oid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Duplicate indicates an expected call of Duplicate
func (_mr *MockDFSFileHandlerMockRecorder) Duplicate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Duplicate", reflect.TypeOf((*MockDFSFileHandler)(nil).Duplicate), arg0)
}

// Remove mocks base method
func (_m *MockDFSFileHandler) Remove(id string, domain int64) (bool, *meta.File, error) {
	ret := _m.ctrl.Call(_m, "Remove", id, domain)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*meta.File)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Remove indicates an expected call of Remove
func (_mr *MockDFSFileHandlerMockRecorder) Remove(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Remove", reflect.TypeOf((*MockDFSFileHandler)(nil).Remove), arg0, arg1)
}

// Close mocks base method
func (_m *MockDFSFileHandler) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockDFSFileHandlerMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockDFSFileHandler)(nil).Close))
}

// Find mocks base method
func (_m *MockDFSFileHandler) Find(fid string) (string, *DFSFileMeta, *transfer.FileInfo, error) {
	ret := _m.ctrl.Call(_m, "Find", fid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*DFSFileMeta)
	ret2, _ := ret[2].(*transfer.FileInfo)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// Find indicates an expected call of Find
func (_mr *MockDFSFileHandlerMockRecorder) Find(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Find", reflect.TypeOf((*MockDFSFileHandler)(nil).Find), arg0)
}

// Name mocks base method
func (_m *MockDFSFileHandler) Name() string {
	ret := _m.ctrl.Call(_m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (_mr *MockDFSFileHandlerMockRecorder) Name() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Name", reflect.TypeOf((*MockDFSFileHandler)(nil).Name))
}

// HealthStatus mocks base method
func (_m *MockDFSFileHandler) HealthStatus() int {
	ret := _m.ctrl.Call(_m, "HealthStatus")
	ret0, _ := ret[0].(int)
	return ret0
}

// HealthStatus indicates an expected call of HealthStatus
func (_mr *MockDFSFileHandlerMockRecorder) HealthStatus() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "HealthStatus", reflect.TypeOf((*MockDFSFileHandler)(nil).HealthStatus))
}

// FindByMd5 mocks base method
func (_m *MockDFSFileHandler) FindByMd5(md5 string, domain int64, size int64) (string, error) {
	ret := _m.ctrl.Call(_m, "FindByMd5", md5, domain, size)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByMd5 indicates an expected call of FindByMd5
func (_mr *MockDFSFileHandlerMockRecorder) FindByMd5(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FindByMd5", reflect.TypeOf((*MockDFSFileHandler)(nil).FindByMd5), arg0, arg1, arg2)
}

// MockDFSFileMinorHandler is a mock of DFSFileMinorHandler interface
type MockDFSFileMinorHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDFSFileMinorHandlerMockRecorder
}

// MockDFSFileMinorHandlerMockRecorder is the mock recorder for MockDFSFileMinorHandler
type MockDFSFileMinorHandlerMockRecorder struct {
	mock *MockDFSFileMinorHandler
}

// NewMockDFSFileMinorHandler creates a new mock instance
func NewMockDFSFileMinorHandler(ctrl *gomock.Controller) *MockDFSFileMinorHandler {
	mock := &MockDFSFileMinorHandler{ctrl: ctrl}
	mock.recorder = &MockDFSFileMinorHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockDFSFileMinorHandler) EXPECT() *MockDFSFileMinorHandlerMockRecorder {
	return _m.recorder
}

// Create mocks base method
func (_m *MockDFSFileMinorHandler) Create(info *transfer.FileInfo) (DFSFile, error) {
	ret := _m.ctrl.Call(_m, "Create", info)
	ret0, _ := ret[0].(DFSFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (_mr *MockDFSFileMinorHandlerMockRecorder) Create(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Create", reflect.TypeOf((*MockDFSFileMinorHandler)(nil).Create), arg0)
}

// Open mocks base method
func (_m *MockDFSFileMinorHandler) Open(id string, domain int64) (DFSFile, error) {
	ret := _m.ctrl.Call(_m, "Open", id, domain)
	ret0, _ := ret[0].(DFSFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open
func (_mr *MockDFSFileMinorHandlerMockRecorder) Open(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Open", reflect.TypeOf((*MockDFSFileMinorHandler)(nil).Open), arg0, arg1)
}

// Duplicate mocks base method
func (_m *MockDFSFileMinorHandler) Duplicate(oid string) (string, error) {
	ret := _m.ctrl.Call(_m, "Duplicate", oid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Duplicate indicates an expected call of Duplicate
func (_mr *MockDFSFileMinorHandlerMockRecorder) Duplicate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Duplicate", reflect.TypeOf((*MockDFSFileMinorHandler)(nil).Duplicate), arg0)
}

// Remove mocks base method
func (_m *MockDFSFileMinorHandler) Remove(id string, domain int64) (bool, *meta.File, error) {
	ret := _m.ctrl.Call(_m, "Remove", id, domain)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*meta.File)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Remove indicates an expected call of Remove
func (_mr *MockDFSFileMinorHandlerMockRecorder) Remove(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Remove", reflect.TypeOf((*MockDFSFileMinorHandler)(nil).Remove), arg0, arg1)
}

// Close mocks base method
func (_m *MockDFSFileMinorHandler) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockDFSFileMinorHandlerMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockDFSFileMinorHandler)(nil).Close))
}

// Find mocks base method
func (_m *MockDFSFileMinorHandler) Find(fid string) (string, *DFSFileMeta, *transfer.FileInfo, error) {
	ret := _m.ctrl.Call(_m, "Find", fid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*DFSFileMeta)
	ret2, _ := ret[2].(*transfer.FileInfo)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// Find indicates an expected call of Find
func (_mr *MockDFSFileMinorHandlerMockRecorder) Find(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Find", reflect.TypeOf((*MockDFSFileMinorHandler)(nil).Find), arg0)
}

// Name mocks base method
func (_m *MockDFSFileMinorHandler) Name() string {
	ret := _m.ctrl.Call(_m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (_mr *MockDFSFileMinorHandlerMockRecorder) Name() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Name", reflect.TypeOf((*MockDFSFileMinorHandler)(nil).Name))
}

// HealthStatus mocks base method
func (_m *MockDFSFileMinorHandler) HealthStatus() int {
	ret := _m.ctrl.Call(_m, "HealthStatus")
	ret0, _ := ret[0].(int)
	return ret0
}

// HealthStatus indicates an expected call of HealthStatus
func (_mr *MockDFSFileMinorHandlerMockRecorder) HealthStatus() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "HealthStatus", reflect.TypeOf((*MockDFSFileMinorHandler)(nil).HealthStatus))
}

// FindByMd5 mocks base method
func (_m *MockDFSFileMinorHandler) FindByMd5(md5 string, domain int64, size int64) (string, error) {
	ret := _m.ctrl.Call(_m, "FindByMd5", md5, domain, size)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByMd5 indicates an expected call of FindByMd5
func (_mr *MockDFSFileMinorHandlerMockRecorder) FindByMd5(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FindByMd5", reflect.TypeOf((*MockDFSFileMinorHandler)(nil).FindByMd5), arg0, arg1, arg2)
}

// CreateWithGivenId mocks base method
func (_m *MockDFSFileMinorHandler) CreateWithGivenId(info *transfer.FileInfo) (DFSFile, error) {
	ret := _m.ctrl.Call(_m, "CreateWithGivenId", info)
	ret0, _ := ret[0].(DFSFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWithGivenId indicates an expected call of CreateWithGivenId
func (_mr *MockDFSFileMinorHandlerMockRecorder) CreateWithGivenId(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CreateWithGivenId", reflect.TypeOf((*MockDFSFileMinorHandler)(nil).CreateWithGivenId), arg0)
}

// DuplicateWithGivenId mocks base method
func (_m *MockDFSFileMinorHandler) DuplicateWithGivenId(primaryId string, dupId string) (string, error) {
	ret := _m.ctrl.Call(_m, "DuplicateWithGivenId", primaryId, dupId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DuplicateWithGivenId indicates an expected call of DuplicateWithGivenId
func (_mr *MockDFSFileMinorHandlerMockRecorder) DuplicateWithGivenId(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DuplicateWithGivenId", reflect.TypeOf((*MockDFSFileMinorHandler)(nil).DuplicateWithGivenId), arg0, arg1)
}
